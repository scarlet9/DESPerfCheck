preamble
{{{
#include <stdio.h>
#include <stdlib.h>

//! For performance check
static unsigned int seed;
volatile long long sum = 0;

//! static

    // used for printing descriptor in output
    int PRINTINFO  = 0;
    int PLAINTEXT      = 0;
    int USERKEY        = 1;
    int CIPHERTEXT     = 2;

    // algorithm has 16 total rounds
    int MAXROUNDS      = 16;

    // sample user keys
    int USERKEYS[2] = {0x00000000, 0x00000000};

    // PC1 permutation for key schedule
    int PC1[56] = {57, 49, 41, 33, 25, 17,  9,
                    1, 58, 50, 42, 34, 26, 18,
                   10,  2, 59, 51, 43, 35, 27,
                   19, 11,  3, 60, 52, 44, 36,
                   63, 55, 47, 39, 31, 23, 15,
                    7, 62, 54, 46, 38, 30, 22,
                   14,  6, 61, 53, 45, 37, 29,
                   21, 13,  5, 28, 20, 12,  4};
    
    // PC2 permutation for key schedule
    int PC2[48] = {14, 17, 11, 24,  1,  5,
                    3, 28, 15,  6, 21, 10,
                   23, 19, 12,  4, 26,  8,
                   16,  7, 27, 20, 13,  2,
                   41, 52, 31, 37, 47, 55,
                   30, 40, 51, 45, 33, 48,
                   44, 49, 39, 56, 34, 53,
                   46, 42, 50, 36, 29, 32};
    
    // key rotation table for key schedule
    int RT[16] = {1, 1, 2, 2, 
                  2, 2, 2, 2, 
                  1, 2, 2, 2, 
                  2, 2, 2, 1};
    
    // initial permuation
    int IP[64] = {58, 50, 42, 34, 26, 18, 10, 2,
                  60, 52, 44, 36, 28, 20, 12, 4,
                  62, 54, 46, 38, 30, 22, 14, 6,
                  64, 56, 48, 40, 32, 24, 16, 8,
                  57, 49, 41, 33, 25, 17,  9, 1,
                  59, 51, 43, 35, 27, 19, 11, 3,
                  61, 53, 45, 37, 29, 21, 13, 5,
                  63, 55, 47, 39, 31, 23, 15, 7};

    // expansion permutation (bit selection)
    int E[48] = {32,  1,  2,  3,  4,  5,
                  4,  5,  6,  7,  8,  9,
                  8,  9, 10, 11, 12, 13,
                 12, 13, 14, 15, 16, 17,
                 16, 17, 18, 19, 20, 21,
                 20, 21, 22, 23, 24, 25,
                 24, 25, 26, 27, 28, 29,
                 28, 29, 30, 31, 32,  1};
    
    // P permutation of sbox output
    int P[32] = {16,  7, 20, 21,
                 29, 12, 28, 17,
                  1, 15, 23, 26,
                  5, 18, 31, 10,
                  2,  8, 24, 14,
                 32, 27,  3,  9,
                 19, 13, 30,  6,
                 22, 11,  4, 25};
    
    // inverse intial permuation
    int IPm1[64] = {40, 8, 48, 16, 56, 24, 64, 32,
                    39, 7, 47, 15, 55, 23, 63, 31,
                    38, 6, 46, 14, 54, 22, 62, 30,
                    37, 5, 45, 13, 53, 21, 61, 29,
                    36, 4, 44, 12, 52, 20, 60, 28,
                    35, 3, 43, 11, 51, 19, 59, 27,
                    34, 2, 42, 10, 50, 18, 58, 26,
                    33, 1, 41,  9, 49, 17, 57, 25};
    
    // provides sbox permutations for DES encryption
    int S1[4][16] = {{14,  4, 13,  1,  2, 15, 11,  8,  3, 10,  6, 12,  5,  9,  0,  7},
                     { 0, 15,  7,  4, 14,  2, 13,  1, 10,  6, 12, 11,  9,  5,  3,  8},
                     { 4,  1, 14,  8, 13,  6,  2, 11, 15, 12,  9,  7,  3, 10,  5,  0},
                     {15, 12,  8,  2,  4,  9,  1,  7,  5, 11,  3, 14, 10,  0,  6, 13}};
    
    int S2[4][16] = {{15,  1,  8, 14,  6, 11,  3,  4,  9,  7,  2, 13, 12,  0,  5, 10},
                     { 3, 13,  4,  7, 15,  2,  8, 14, 12,  0,  1, 10,  6,  9, 11,  5},
                     { 0, 14,  7, 11, 10,  4, 13,  1,  5,  8, 12,  6,  9,  3,  2, 15},
                     {13,  8, 10,  1,  3, 15,  4,  2, 11,  6,  7, 12,  0,  5, 14, 9}};
    
    int S3[4][16] = {{10,  0,  9, 14,  6,  3, 15,  5,  1, 13, 12,  7, 11,  4,  2,  8},
                     {13 , 7,  0,  9,  3,  4,  6, 10,  2,  8,  5, 14, 12, 11, 15,  1},
                     {13 , 6,  4,  9,  8, 15,  3,  0, 11,  1,  2, 12,  5, 10, 14,  7},
                     { 1, 10, 13,  0,  6,  9,  8,  7,  4, 15, 14,  3, 11,  5,  2, 12}};
    
    int S4[4][16] = {{ 7, 13, 14,  3,  0,  6,  9, 10,  1,  2,  8,  5, 11, 12,  4, 15},
                     {13,  8, 11,  5,  6, 15,  0,  3,  4,  7,  2, 12,  1, 10, 14,  9},
                     {10,  6,  9,  0, 12, 11,  7, 13, 15,  1,  3, 14,  5,  2,  8,  4},
                     { 3, 15,  0,  6, 10,  1, 13,  8,  9,  4,  5, 11, 12,  7,  2, 14}};
    
    int S5[4][16] = {{ 2, 12,  4,  1,  7, 10, 11,  6,  8,  5,  3, 15, 13,  0, 14,  9},
                     {14, 11,  2, 12,  4,  7, 13,  1,  5,  0, 15, 10,  3,  9,  8,  6},
                     { 4,  2,  1, 11, 10, 13,  7,  8, 15,  9, 12,  5,  6,  3,  0, 14},
                     {11,  8, 12,  7,  1, 14,  2, 13,  6, 15,  0,  9, 10,  4,  5,  3}}; 
    
    int S6[4][16] = {{12,  1, 10, 15,  9,  2,  6,  8,  0, 13,  3,  4, 14,  7,  5, 11},
                     {10, 15,  4,  2,  7, 12,  9,  5,  6,  1, 13, 14,  0, 11,  3,  8},
                     { 9, 14, 15,  5,  2,  8, 12,  3,  7,  0,  4, 10,  1, 13, 11,  6},
                     { 4,  3,  2, 12,  9,  5, 15, 10, 11, 14,  1,  7,  6,  0,  8, 13}};
    
    int S7[4][16] = {{ 4, 11,  2, 14, 15,  0,  8, 13,  3, 12,  9,  7,  5, 10,  6,  1},
                     {13,  0, 11,  7,  4,  9,  1, 10, 14,  3,  5, 12,  2, 15,  8,  6},
                     { 1,  4, 11, 13, 12,  3,  7, 14, 10, 15,  6,  8,  0,  5,  9,  2},
                     { 6, 11, 13,  8,  1,  4, 10,  7,  9,  5,  0, 15, 14,  2,  3, 12}};
    
    int S8[4][16] = {{13,  2,  8,  4,  6, 15, 11,  1, 10,  9,  3, 14,  5,  0, 12,  7},
                     { 1, 15, 13,  8, 10,  3,  7,  4, 12,  5,  6, 11,  0, 14,  9,  2},
                     { 7, 11,  4,  1,  9, 12, 14,  2,  0,  6, 10, 13, 15,  3,  5,  8},
                     { 2,  1, 14,  7,  4, 10,  8, 13, 15, 12,  9,  0,  3,  5,  6, 11}};
    
//! END static

    int keys[16][48];

}}}

//! sdf
sdf DES {

//! structure def
  int F_PlainTextSource -> IntoBits;
  int IntoBits -> doIP;

  int doIP -> __split_SP_DEScoder__1 (1);

  for (int iter=1:16)
  begin

    int __split_SP_DEScoder[iter] (1) -> __split_SP_nextR[iter] (64);
    int __split_SP_DEScoder[iter] (1) -> AnonFilter_a0[iter];

    int __split_SP_nextR[iter] (32) -> __split_SP_f[iter] (1);
    int __split_SP_nextR[iter] (32) -> __join_SP_nextR[iter] (1);

    int __split_SP_f[iter] (1) -> doE[iter];
    int __split_SP_f[iter] (1) -> f_KeySchedule[iter];
    int doE[iter] -> __join_SP_f[iter] (1);
    int f_KeySchedule[iter] -> __join_SP_f[iter] (1);
    int __join_SP_f[iter] (2) -> Xor_f[iter];
    
    int Xor_f[iter] -> __split_Sboxes[iter] (48);

    int __split_Sboxes[iter] (6) -> Sbox1[iter];
    int __split_Sboxes[iter] (6) -> Sbox2[iter];
    int __split_Sboxes[iter] (6) -> Sbox3[iter];
    int __split_Sboxes[iter] (6) -> Sbox4[iter];
    int __split_Sboxes[iter] (6) -> Sbox5[iter];
    int __split_Sboxes[iter] (6) -> Sbox6[iter];
    int __split_Sboxes[iter] (6) -> Sbox7[iter];
    int __split_Sboxes[iter] (6) -> Sbox8[iter];
    int Sbox1[iter] -> __join_Sboxes[iter] (4);
    int Sbox2[iter] -> __join_Sboxes[iter] (4);
    int Sbox3[iter] -> __join_Sboxes[iter] (4);
    int Sbox4[iter] -> __join_Sboxes[iter] (4);
    int Sbox5[iter] -> __join_Sboxes[iter] (4);
    int Sbox6[iter] -> __join_Sboxes[iter] (4);
    int Sbox7[iter] -> __join_Sboxes[iter] (4);
    int Sbox8[iter] -> __join_Sboxes[iter] (4);

    int __join_Sboxes[iter] (32) -> doP[iter];

    int doP[iter] -> __join_SP_nextR[iter] (1);

    int __join_SP_nextR[iter] (2) -> Xor_nextR[iter];

    int Xor_nextR[iter] -> __join_SP_DEScoder[iter] (32);
    int AnonFilter_a0[iter] -> __join_SP_DEScoder[iter] (32);

    int __join_SP_DEScoder[iter] (64) -> __split_SP_DEScoder[iter + 1] (1);
  end

  int __split_SP_DEScoder__17 (1) -> CrissCross;
  int CrissCross -> doIPm1;
  int doIPm1 -> BitstoInts;
  int BitstoInts -> F_HexPrinter;
//! END structure def

actor F_PlainTextSource {

  init:
  {{{
    printf("Enter seed: ");
    scanf ("%d", &seed);
    srand(seed);

    USERKEYS[0] = rand_r(&seed);
    USERKEYS[1] = rand_r(&seed);
  }}}

  firing:
  {{{
    //! Generate randomized key
    @y1 = rand_r(&seed); // LSW
    @y2 = rand_r(&seed); // MSW
  }}}

  output:
    IntoBits: y[1-2];
}

actor IntoBits {
  input: 
    F_PlainTextSource: x1;

  firing:
  {{{
    int w = @x1;
    int i;

    int m = 1;

    i = 0;
    if (((w & m) >> 0) != 0)
      @y1 = 1;
    else
      @y1 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 1) != 0)
      @y2 = 1;
    else
      @y2 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 2) != 0)
      @y3 = 1;
    else
      @y3 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 3) != 0)
      @y4 = 1;
    else
      @y4 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 4) != 0)
      @y5 = 1;
    else
      @y5 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 5) != 0)
      @y6 = 1;
    else
      @y6 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 6) != 0)
      @y7 = 1;
    else
      @y7 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 7) != 0)
      @y8 = 1;
    else
      @y8 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 8) != 0)
      @y9 = 1;
    else
      @y9 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 9) != 0)
      @y10 = 1;
    else
      @y10 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 10) != 0)
      @y11 = 1;
    else
      @y11 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 11) != 0)
      @y12 = 1;
    else
      @y12 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 12) != 0)
      @y13 = 1;
    else
      @y13 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 13) != 0)
      @y14 = 1;
    else
      @y14 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 14) != 0)
      @y15 = 1;
    else
      @y15 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 15) != 0)
      @y16 = 1;
    else
      @y16 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 16) != 0)
      @y17 = 1;
    else
      @y17 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 17) != 0)
      @y18 = 1;
    else
      @y18 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 18) != 0)
      @y19 = 1;
    else
      @y19 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 19) != 0)
      @y20 = 1;
    else
      @y20 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 20) != 0)
      @y21 = 1;
    else
      @y21 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 21) != 0)
      @y22 = 1;
    else
      @y22 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 22) != 0)
      @y23 = 1;
    else
      @y23 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 23) != 0)
      @y24 = 1;
    else
      @y24 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 24) != 0)
      @y25 = 1;
    else
      @y25 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 25) != 0)
      @y26 = 1;
    else
      @y26 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 26) != 0)
      @y27 = 1;
    else
      @y27 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 27) != 0)
      @y28 = 1;
    else
      @y28 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 28) != 0)
      @y29 = 1;
    else
      @y29 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 29) != 0)
      @y30 = 1;
    else
      @y30 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 30) != 0)
      @y31 = 1;
    else
      @y31 = 0;
    m = m << 1;
    i++;

    if (((w & m) >> 31) != 0)
      @y32 = 1;
    else
      @y32 = 0;
    m = m << 1;
    i++;
  }}}
  
  output:
    doIP: y[1-32];
}

actor doIP {
  input:
    IntoBits: x[1-64];

  firing:
  {{{
    int w[64] = {
      @x1, @x2, @x3, @x4, @x5, @x6, @x7, @x8, @x9, @x10,
      @x11, @x12, @x13, @x14, @x15, @x16, @x17, @x18, @x19, @x20,
      @x21, @x22, @x23, @x24, @x25, @x26, @x27, @x28, @x29, @x30,
      @x31, @x32, @x33, @x34, @x35, @x36, @x37, @x38, @x39, @x40,
      @x41, @x42, @x43, @x44, @x45, @x46, @x47, @x48, @x49, @x50,
      @x51, @x52, @x53, @x54, @x55, @x56, @x57, @x58, @x59, @x60,
      @x61, @x62, @x63, @x64
    };
    int i;

    i = 0;
    @y1 = w[IP[i] - 1];
    i++;
    
    @y2 = w[IP[i] - 1];
    i++;
    
    @y3 = w[IP[i] - 1];
    i++;
    
    @y4 = w[IP[i] - 1];
    i++;
    
    @y5 = w[IP[i] - 1];
    i++;
    
    @y6 = w[IP[i] - 1];
    i++;
    
    @y7 = w[IP[i] - 1];
    i++;
    
    @y8 = w[IP[i] - 1];
    i++;
    
    @y9 = w[IP[i] - 1];
    i++;
    
    @y10 = w[IP[i] - 1];
    i++;
    
    @y11 = w[IP[i] - 1];
    i++;
    
    @y12 = w[IP[i] - 1];
    i++;
    
    @y13 = w[IP[i] - 1];
    i++;
    
    @y14 = w[IP[i] - 1];
    i++;
    
    @y15 = w[IP[i] - 1];
    i++;
    
    @y16 = w[IP[i] - 1];
    i++;
    
    @y17 = w[IP[i] - 1];
    i++;
    
    @y18 = w[IP[i] - 1];
    i++;
    
    @y19 = w[IP[i] - 1];
    i++;
    
    @y20 = w[IP[i] - 1];
    i++;
    
    @y21 = w[IP[i] - 1];
    i++;
    
    @y22 = w[IP[i] - 1];
    i++;
    
    @y23 = w[IP[i] - 1];
    i++;
    
    @y24 = w[IP[i] - 1];
    i++;
    
    @y25 = w[IP[i] - 1];
    i++;
    
    @y26 = w[IP[i] - 1];
    i++;
    
    @y27 = w[IP[i] - 1];
    i++;
    
    @y28 = w[IP[i] - 1];
    i++;
    
    @y29 = w[IP[i] - 1];
    i++;
    
    @y30 = w[IP[i] - 1];
    i++;
    
    @y31 = w[IP[i] - 1];
    i++;
    
    @y32 = w[IP[i] - 1];
    i++;
    
    @y33 = w[IP[i] - 1];
    i++;
    
    @y34 = w[IP[i] - 1];
    i++;
    
    @y35 = w[IP[i] - 1];
    i++;
    
    @y36 = w[IP[i] - 1];
    i++;
    
    @y37 = w[IP[i] - 1];
    i++;
    
    @y38 = w[IP[i] - 1];
    i++;
    
    @y39 = w[IP[i] - 1];
    i++;
    
    @y40 = w[IP[i] - 1];
    i++;
    
    @y41 = w[IP[i] - 1];
    i++;
    
    @y42 = w[IP[i] - 1];
    i++;
    
    @y43 = w[IP[i] - 1];
    i++;
    
    @y44 = w[IP[i] - 1];
    i++;
    
    @y45 = w[IP[i] - 1];
    i++;
    
    @y46 = w[IP[i] - 1];
    i++;
    
    @y47 = w[IP[i] - 1];
    i++;
    
    @y48 = w[IP[i] - 1];
    i++;
    
    @y49 = w[IP[i] - 1];
    i++;
    
    @y50 = w[IP[i] - 1];
    i++;
    
    @y51 = w[IP[i] - 1];
    i++;
    
    @y52 = w[IP[i] - 1];
    i++;
    
    @y53 = w[IP[i] - 1];
    i++;
    
    @y54 = w[IP[i] - 1];
    i++;
    
    @y55 = w[IP[i] - 1];
    i++;
    
    @y56 = w[IP[i] - 1];
    i++;
    
    @y57 = w[IP[i] - 1];
    i++;
    
    @y58 = w[IP[i] - 1];
    i++;
    
    @y59 = w[IP[i] - 1];
    i++;
    
    @y60 = w[IP[i] - 1];
    i++;
    
    @y61 = w[IP[i] - 1];
    i++;
    
    @y62 = w[IP[i] - 1];
    i++;
    
    @y63 = w[IP[i] - 1];
    i++;
    
    @y64 = w[IP[i] - 1];
    i++;
  }}}

  output:
    __split_SP_DEScoder__1: y[1-64];
}

actor doE {
  input:
    __split_SP_f: x[1-32];

  firing:
  {{{
    int w[32] = {
      @x1, @x2, @x3, @x4, @x5, @x6, @x7, @x8, @x9, @x10,
      @x11, @x12, @x13, @x14, @x15, @x16, @x17, @x18, @x19, @x20,
      @x21, @x22, @x23, @x24, @x25, @x26, @x27, @x28, @x29, @x30,
      @x31, @x32
    };
    int i;
    i = 0;

    @y1 = w[E[i] - 1];
    i++;
    
    @y2 = w[E[i] - 1];
    i++;
    
    @y3 = w[E[i] - 1];
    i++;
    
    @y4 = w[E[i] - 1];
    i++;
    
    @y5 = w[E[i] - 1];
    i++;
    
    @y6 = w[E[i] - 1];
    i++;
    
    @y7 = w[E[i] - 1];
    i++;
    
    @y8 = w[E[i] - 1];
    i++;
    
    @y9 = w[E[i] - 1];
    i++;
    
    @y10 = w[E[i] - 1];
    i++;
    
    @y11 = w[E[i] - 1];
    i++;
    
    @y12 = w[E[i] - 1];
    i++;
    
    @y13 = w[E[i] - 1];
    i++;
    
    @y14 = w[E[i] - 1];
    i++;
    
    @y15 = w[E[i] - 1];
    i++;
    
    @y16 = w[E[i] - 1];
    i++;
    
    @y17 = w[E[i] - 1];
    i++;
    
    @y18 = w[E[i] - 1];
    i++;
    
    @y19 = w[E[i] - 1];
    i++;
    
    @y20 = w[E[i] - 1];
    i++;
    
    @y21 = w[E[i] - 1];
    i++;
    
    @y22 = w[E[i] - 1];
    i++;
    
    @y23 = w[E[i] - 1];
    i++;
    
    @y24 = w[E[i] - 1];
    i++;
    
    @y25 = w[E[i] - 1];
    i++;
    
    @y26 = w[E[i] - 1];
    i++;
    
    @y27 = w[E[i] - 1];
    i++;
    
    @y28 = w[E[i] - 1];
    i++;
    
    @y29 = w[E[i] - 1];
    i++;
    
    @y30 = w[E[i] - 1];
    i++;
    
    @y31 = w[E[i] - 1];
    i++;
    
    @y32 = w[E[i] - 1];
    i++;
    
    @y33 = w[E[i] - 1];
    i++;
    
    @y34 = w[E[i] - 1];
    i++;
    
    @y35 = w[E[i] - 1];
    i++;
    
    @y36 = w[E[i] - 1];
    i++;
    
    @y37 = w[E[i] - 1];
    i++;
    
    @y38 = w[E[i] - 1];
    i++;
    
    @y39 = w[E[i] - 1];
    i++;
    
    @y40 = w[E[i] - 1];
    i++;
    
    @y41 = w[E[i] - 1];
    i++;
    
    @y42 = w[E[i] - 1];
    i++;
    
    @y43 = w[E[i] - 1];
    i++;
    
    @y44 = w[E[i] - 1];
    i++;
    
    @y45 = w[E[i] - 1];
    i++;
    
    @y46 = w[E[i] - 1];
    i++;
    
    @y47 = w[E[i] - 1];
    i++;
    
    @y48 = w[E[i] - 1];
    i++;
  }}}

  output:
    __join_SP_f: y[1-48];
}

actor f_KeySchedule {
  init:
  {{{
    int k64[64];
    int w, i, r;

    for (w = 1; w >= 0; w--) {
      int v = USERKEYS[w]; // LSW first then MSW
      int m = 1;
      for (i = 0; i < 32; i++) {
        if (((v & m) >> i) != 0)
          k64[((1 - w) * 32) + i] = 1;
        else
          k64[((1 - w) * 32) + i] = 0;
        m = m << 1;
      }
    }

    // apply PC1
    int k56[56];
    for (i = 0; i < 56; i++) {
      // input bit stream is from MSB ... LSB 
      // that is LSB is head of FIFO, MSB is tail of FIFO
      // as in b63 b62 b61 b60 ... b3  b2  b1  b0
      // but PC1 permutation requires bit numbering from left to right
      // as in b1  b2  b3  b4  ... b61 b62 b63 b64
      // (note indexing from 0 vs 1)
      k56[i] = k64[64 - PC1[i]];
    }

    for (r = 0; r < MAXROUNDS; r++) {
      // rotate left and right 28-bit bits chunks
      // according to round number
      int bits[56];
      for (i =  0; i < 28; i++) 
        bits[i] = k56[(i + RT[r]) % 28];
      for (i = 28; i < 56; i++) 
        bits[i] = k56[28 + ((i + RT[r]) % 28)];
      for (i =  0; i < 56; i++) 
        k56[i] = bits[i];
      
      // apply PC2 and store resultant key
      for (i = 47; i >= 0; i--) {
        // input bit stream is from MSB ... LSB
        // that is LSB is head of FIFO, MSB is tail of FIFO
        // as in b63 b62 b61 b60 ... b3  b2  b1  b0
        // permutation PC2 permutes the bits then emits them
        // in reverse order
        keys[r][47 - i] = k56[PC2[i] - 1];
      }
    }
  }}}

  input:
    __split_SP_f: x[1-32];

  firing:
  {{{
    int i;

    i = 0;
    @y1 = keys[iter - 1][i];
    i++;
    
    @y2 = keys[iter - 1][i];
    i++;
    
    @y3 = keys[iter - 1][i];
    i++;
    
    @y4 = keys[iter - 1][i];
    i++;
    
    @y5 = keys[iter - 1][i];
    i++;
    
    @y6 = keys[iter - 1][i];
    i++;
    
    @y7 = keys[iter - 1][i];
    i++;
    
    @y8 = keys[iter - 1][i];
    i++;
    
    @y9 = keys[iter - 1][i];
    i++;
    
    @y10 = keys[iter - 1][i];
    i++;
    
    @y11 = keys[iter - 1][i];
    i++;
    
    @y12 = keys[iter - 1][i];
    i++;
    
    @y13 = keys[iter - 1][i];
    i++;
    
    @y14 = keys[iter - 1][i];
    i++;
    
    @y15 = keys[iter - 1][i];
    i++;
    
    @y16 = keys[iter - 1][i];
    i++;
    
    @y17 = keys[iter - 1][i];
    i++;
    
    @y18 = keys[iter - 1][i];
    i++;
    
    @y19 = keys[iter - 1][i];
    i++;
    
    @y20 = keys[iter - 1][i];
    i++;
    
    @y21 = keys[iter - 1][i];
    i++;
    
    @y22 = keys[iter - 1][i];
    i++;
    
    @y23 = keys[iter - 1][i];
    i++;
    
    @y24 = keys[iter - 1][i];
    i++;
    
    @y25 = keys[iter - 1][i];
    i++;
    
    @y26 = keys[iter - 1][i];
    i++;
    
    @y27 = keys[iter - 1][i];
    i++;
    
    @y28 = keys[iter - 1][i];
    i++;
    
    @y29 = keys[iter - 1][i];
    i++;
    
    @y30 = keys[iter - 1][i];
    i++;
    
    @y31 = keys[iter - 1][i];
    i++;
    
    @y32 = keys[iter - 1][i];
    i++;
    
    @y33 = keys[iter - 1][i];
    i++;
    
    @y34 = keys[iter - 1][i];
    i++;
    
    @y35 = keys[iter - 1][i];
    i++;
    
    @y36 = keys[iter - 1][i];
    i++;
    
    @y37 = keys[iter - 1][i];
    i++;
    
    @y38 = keys[iter - 1][i];
    i++;
    
    @y39 = keys[iter - 1][i];
    i++;
    
    @y40 = keys[iter - 1][i];
    i++;
    
    @y41 = keys[iter - 1][i];
    i++;
    
    @y42 = keys[iter - 1][i];
    i++;
    
    @y43 = keys[iter - 1][i];
    i++;
    
    @y44 = keys[iter - 1][i];
    i++;
    
    @y45 = keys[iter - 1][i];
    i++;
    
    @y46 = keys[iter - 1][i];
    i++;
    
    @y47 = keys[iter - 1][i];
    i++;
    
    @y48 = keys[iter - 1][i];
    i++;
  }}}

  output:
    __join_SP_f: y[1-48];
}

actor Xor_f {
  input:
    __join_SP_f: x[1-2];

  firing:
  {{{
    int w = @x1;
    int i;

    i = 1;
    int w2 = @x2;
    w = w ^ w2;
    i++;

    @y1 = w;
  }}}

  output:
    __split_Sboxes: y1;
}

actor Sbox1 {
  input:
    __split_Sboxes: x[1-6];

  firing:
  {{{
    int r = @x1;
    int c = @x2;
    c = (@x3 << 1) | c;
    c = (@x4 << 2) | c;
    c = (@x5 << 3) | c;
    r = (@x6 << 1) | r;

    int out = S8[r][c];

    @y1=(int)((out & 0x1) >> 0);
    @y2=(int)((out & 0x2) >> 1);
    @y3=(int)((out & 0x4) >> 2);
    @y4=(int)((out & 0x8) >> 3);
  }}}

  output:
    __join_Sboxes: y[1-4];
}

actor Sbox2 {
  input:
    __split_Sboxes: x[1-6];

  firing:
  {{{
    int r = @x1;
    int c = @x2;
    c = (@x3 << 1) | c;
    c = (@x4 << 2) | c;
    c = (@x5 << 3) | c;
    r = (@x6 << 1) | r;

    int out = S7[r][c];

    @y1=(int)((out & 0x1) >> 0);
    @y2=(int)((out & 0x2) >> 1);
    @y3=(int)((out & 0x4) >> 2);
    @y4=(int)((out & 0x8) >> 3);
  }}}

  output:
    __join_Sboxes: y[1-4];
}

actor Sbox3 {
  input:
    __split_Sboxes: x[1-6];

  firing:
  {{{
    int r = @x1;
    int c = @x2;
    c = (@x3 << 1) | c;
    c = (@x4 << 2) | c;
    c = (@x5 << 3) | c;
    r = (@x6 << 1) | r;

    int out = S6[r][c];

    @y1=(int)((out & 0x1) >> 0);
    @y2=(int)((out & 0x2) >> 1);
    @y3=(int)((out & 0x4) >> 2);
    @y4=(int)((out & 0x8) >> 3);
  }}}

  output:
    __join_Sboxes: y[1-4];
}

actor Sbox4 {
  input:
    __split_Sboxes: x[1-6];

  firing:
  {{{
    int r = @x1;
    int c = @x2;
    c = (@x3 << 1) | c;
    c = (@x4 << 2) | c;
    c = (@x5 << 3) | c;
    r = (@x6 << 1) | r;

    int out = S5[r][c];

    @y1=(int)((out & 0x1) >> 0);
    @y2=(int)((out & 0x2) >> 1);
    @y3=(int)((out & 0x4) >> 2);
    @y4=(int)((out & 0x8) >> 3);
  }}}

  output:
    __join_Sboxes: y[1-4];
}

actor Sbox5 {
  input:
    __split_Sboxes: x[1-6];

  firing:
  {{{
    int r = @x1;
    int c = @x2;
    c = (@x3 << 1) | c;
    c = (@x4 << 2) | c;
    c = (@x5 << 3) | c;
    r = (@x6 << 1) | r;

    int out = S4[r][c];

    @y1=(int)((out & 0x1) >> 0);
    @y2=(int)((out & 0x2) >> 1);
    @y3=(int)((out & 0x4) >> 2);
    @y4=(int)((out & 0x8) >> 3);
  }}}

  output:
    __join_Sboxes: y[1-4];
}

actor Sbox6 {
  input:
    __split_Sboxes: x[1-6];

  firing:
  {{{
    int r = @x1;
    int c = @x2;
    c = (@x3 << 1) | c;
    c = (@x4 << 2) | c;
    c = (@x5 << 3) | c;
    r = (@x6 << 1) | r;

    int out = S3[r][c];

    @y1=(int)((out & 0x1) >> 0);
    @y2=(int)((out & 0x2) >> 1);
    @y3=(int)((out & 0x4) >> 2);
    @y4=(int)((out & 0x8) >> 3);
  }}}

  output:
    __join_Sboxes: y[1-4];
}

actor Sbox7 {
  input:
    __split_Sboxes: x[1-6];

  firing:
  {{{
    int r = @x1;
    int c = @x2;
    c = (@x3 << 1) | c;
    c = (@x4 << 2) | c;
    c = (@x5 << 3) | c;
    r = (@x6 << 1) | r;

    int out = S2[r][c];

    @y1=(int)((out & 0x1) >> 0);
    @y2=(int)((out & 0x2) >> 1);
    @y3=(int)((out & 0x4) >> 2);
    @y4=(int)((out & 0x8) >> 3);
  }}}

  output:
    __join_Sboxes: y[1-4];
}

actor Sbox8 {
  input:
    __split_Sboxes: x[1-6];

  firing:
  {{{
    int r = @x1;
    int c = @x2;
    c = (@x3 << 1) | c;
    c = (@x4 << 2) | c;
    c = (@x5 << 3) | c;
    r = (@x6 << 1) | r;

    int out = S1[r][c];

    @y1=(int)((out & 0x1) >> 0);
    @y2=(int)((out & 0x2) >> 1);
    @y3=(int)((out & 0x4) >> 2);
    @y4=(int)((out & 0x8) >> 3);
  }}}

  output:
    __join_Sboxes: y[1-4];
}

actor doP {
  input:
    __join_Sboxes: x[1-32];

  firing:
  {{{
    int w[32] = {
      @x1, @x2, @x3, @x4, @x5, @x6, @x7, @x8, @x9, @x10,
      @x11, @x12, @x13, @x14, @x15, @x16, @x17, @x18, @x19, @x20,
      @x21, @x22, @x23, @x24, @x25, @x26, @x27, @x28, @x29, @x30,
      @x31, @x32
    };
    int i;

    i = 0;
    @y1 = w[32 - P[31 - i]];
    i++;

    @y2 = w[32 - P[31 - i]];
    i++;

    @y3 = w[32 - P[31 - i]];
    i++;

    @y4 = w[32 - P[31 - i]];
    i++;

    @y5 = w[32 - P[31 - i]];
    i++;

    @y6 = w[32 - P[31 - i]];
    i++;

    @y7 = w[32 - P[31 - i]];
    i++;

    @y8 = w[32 - P[31 - i]];
    i++;

    @y9 = w[32 - P[31 - i]];
    i++;

    @y10 = w[32 - P[31 - i]];
    i++;

    @y11 = w[32 - P[31 - i]];
    i++;

    @y12 = w[32 - P[31 - i]];
    i++;

    @y13 = w[32 - P[31 - i]];
    i++;

    @y14 = w[32 - P[31 - i]];
    i++;

    @y15 = w[32 - P[31 - i]];
    i++;

    @y16 = w[32 - P[31 - i]];
    i++;

    @y17 = w[32 - P[31 - i]];
    i++;

    @y18 = w[32 - P[31 - i]];
    i++;

    @y19 = w[32 - P[31 - i]];
    i++;

    @y20 = w[32 - P[31 - i]];
    i++;

    @y21 = w[32 - P[31 - i]];
    i++;

    @y22 = w[32 - P[31 - i]];
    i++;

    @y23 = w[32 - P[31 - i]];
    i++;

    @y24 = w[32 - P[31 - i]];
    i++;

    @y25 = w[32 - P[31 - i]];
    i++;

    @y26 = w[32 - P[31 - i]];
    i++;

    @y27 = w[32 - P[31 - i]];
    i++;

    @y28 = w[32 - P[31 - i]];
    i++;

    @y29 = w[32 - P[31 - i]];
    i++;

    @y30 = w[32 - P[31 - i]];
    i++;

    @y31 = w[32 - P[31 - i]];
    i++;

    @y32 = w[32 - P[31 - i]];
    i++;
  }}}

  output:
    __join_SP_nextR: y[1-32];
}

actor Xor_nextR {
  input:
    __join_SP_nextR: x[1-2];

  firing:
  {{{
    int w = @x1;
    int i;

    for (i = 1; i < 2; i++) {
      int w2 = @x2;
      w = w ^ w2;
    }
    @y1 = w;
  }}}

  output:
    __join_SP_DEScoder: y1;
}

actor AnonFilter_a0 {
  input:
    __split_SP_DEScoder: x[1-64];
  
  firing:
  {{{
    @y1 = @x1;
    @y2 = @x2;
    @y3 = @x3;
    @y4 = @x4;
    @y5 = @x5;
    @y6 = @x6;
    @y7 = @x7;
    @y8 = @x8;
    @y9 = @x9;
    @y10 = @x10;
    @y11 = @x11;
    @y12 = @x12;
    @y13 = @x13;
    @y14 = @x14;
    @y15 = @x15;
    @y16 = @x16;
    @y17 = @x17;
    @y18 = @x18;
    @y19 = @x19;
    @y20 = @x20;
    @y21 = @x21;
    @y22 = @x22;
    @y23 = @x23;
    @y24 = @x24;
    @y25 = @x25;
    @y26 = @x26;
    @y27 = @x27;
    @y28 = @x28;
    @y29 = @x29;
    @y30 = @x30;
    @y31 = @x31;
    @y32 = @x32;
  }}}

  output:
    __join_SP_DEScoder: y[1-32];
}

actor CrissCross {
  input:
    __split_SP_DEScoder__17: x[1-64];

  firing:
  {{{
    @y1 = @x33;
    @y2 = @x34;
    @y3 = @x35;
    @y4 = @x36;
    @y5 = @x37;
    @y6 = @x38;
    @y7 = @x39;
    @y8 = @x40;
    @y9 = @x41;
    @y10 = @x42;
    @y11 = @x43;
    @y12 = @x44;
    @y13 = @x45;
    @y14 = @x46;
    @y15 = @x47;
    @y16 = @x48;
    @y17 = @x49;
    @y18 = @x50;
    @y19 = @x51;
    @y20 = @x52;
    @y21 = @x53;
    @y22 = @x54;
    @y23 = @x55;
    @y24 = @x56;
    @y25 = @x57;
    @y26 = @x58;
    @y27 = @x59;
    @y28 = @x60;
    @y29 = @x61;
    @y30 = @x62;
    @y31 = @x63;
    @y32 = @x64;
    @y33 = @x1;
    @y34 = @x2;
    @y35 = @x3;
    @y36 = @x4;
    @y37 = @x5;
    @y38 = @x6;
    @y39 = @x7;
    @y40 = @x8;
    @y41 = @x9;
    @y42 = @x10;
    @y43 = @x11;
    @y44 = @x12;
    @y45 = @x13;
    @y46 = @x14;
    @y47 = @x15;
    @y48 = @x16;
    @y49 = @x17;
    @y50 = @x18;
    @y51 = @x19;
    @y52 = @x20;
    @y53 = @x21;
    @y54 = @x22;
    @y55 = @x23;
    @y56 = @x24;
    @y57 = @x25;
    @y58 = @x26;
    @y59 = @x27;
    @y60 = @x28;
    @y61 = @x29;
    @y62 = @x30;
    @y63 = @x31;
    @y64 = @x32;
  }}}

  output:
    doIPm1: y[1-64];
}

actor doIPm1 {
  input:
    CrissCross: x[1-64];

  firing:
  {{{
    int w[64] = {
      @x1, @x2, @x3, @x4, @x5, @x6, @x7, @x8, @x9, @x10,
      @x11, @x12, @x13, @x14, @x15, @x16, @x17, @x18, @x19, @x20,
      @x21, @x22, @x23, @x24, @x25, @x26, @x27, @x28, @x29, @x30,
      @x31, @x32, @x33, @x34, @x35, @x36, @x37, @x38, @x39, @x40,
      @x41, @x42, @x43, @x44, @x45, @x46, @x47, @x48, @x49, @x50,
      @x51, @x52, @x53, @x54, @x55, @x56, @x57, @x58, @x59, @x60,
      @x61, @x62, @x63, @x64
    };
    int i;

    i = 0;
    @y1 = w[IPm1[i] - 1];
    i++;
    
    @y2 = w[IPm1[i] - 1];
    i++;
    
    @y3 = w[IPm1[i] - 1];
    i++;
    
    @y4 = w[IPm1[i] - 1];
    i++;
    
    @y5 = w[IPm1[i] - 1];
    i++;
    
    @y6 = w[IPm1[i] - 1];
    i++;
    
    @y7 = w[IPm1[i] - 1];
    i++;
    
    @y8 = w[IPm1[i] - 1];
    i++;
    
    @y9 = w[IPm1[i] - 1];
    i++;
    
    @y10 = w[IPm1[i] - 1];
    i++;
    
    @y11 = w[IPm1[i] - 1];
    i++;
    
    @y12 = w[IPm1[i] - 1];
    i++;
    
    @y13 = w[IPm1[i] - 1];
    i++;
    
    @y14 = w[IPm1[i] - 1];
    i++;
    
    @y15 = w[IPm1[i] - 1];
    i++;
    
    @y16 = w[IPm1[i] - 1];
    i++;
    
    @y17 = w[IPm1[i] - 1];
    i++;
    
    @y18 = w[IPm1[i] - 1];
    i++;
    
    @y19 = w[IPm1[i] - 1];
    i++;
    
    @y20 = w[IPm1[i] - 1];
    i++;
    
    @y21 = w[IPm1[i] - 1];
    i++;
    
    @y22 = w[IPm1[i] - 1];
    i++;
    
    @y23 = w[IPm1[i] - 1];
    i++;
    
    @y24 = w[IPm1[i] - 1];
    i++;
    
    @y25 = w[IPm1[i] - 1];
    i++;
    
    @y26 = w[IPm1[i] - 1];
    i++;
    
    @y27 = w[IPm1[i] - 1];
    i++;
    
    @y28 = w[IPm1[i] - 1];
    i++;
    
    @y29 = w[IPm1[i] - 1];
    i++;
    
    @y30 = w[IPm1[i] - 1];
    i++;
    
    @y31 = w[IPm1[i] - 1];
    i++;
    
    @y32 = w[IPm1[i] - 1];
    i++;
    
    @y33 = w[IPm1[i] - 1];
    i++;
    
    @y34 = w[IPm1[i] - 1];
    i++;
    
    @y35 = w[IPm1[i] - 1];
    i++;
    
    @y36 = w[IPm1[i] - 1];
    i++;
    
    @y37 = w[IPm1[i] - 1];
    i++;
    
    @y38 = w[IPm1[i] - 1];
    i++;
    
    @y39 = w[IPm1[i] - 1];
    i++;
    
    @y40 = w[IPm1[i] - 1];
    i++;
    
    @y41 = w[IPm1[i] - 1];
    i++;
    
    @y42 = w[IPm1[i] - 1];
    i++;
    
    @y43 = w[IPm1[i] - 1];
    i++;
    
    @y44 = w[IPm1[i] - 1];
    i++;
    
    @y45 = w[IPm1[i] - 1];
    i++;
    
    @y46 = w[IPm1[i] - 1];
    i++;
    
    @y47 = w[IPm1[i] - 1];
    i++;
    
    @y48 = w[IPm1[i] - 1];
    i++;
    
    @y49 = w[IPm1[i] - 1];
    i++;
    
    @y50 = w[IPm1[i] - 1];
    i++;
    
    @y51 = w[IPm1[i] - 1];
    i++;
    
    @y52 = w[IPm1[i] - 1];
    i++;
    
    @y53 = w[IPm1[i] - 1];
    i++;
    
    @y54 = w[IPm1[i] - 1];
    i++;
    
    @y55 = w[IPm1[i] - 1];
    i++;
    
    @y56 = w[IPm1[i] - 1];
    i++;
    
    @y57 = w[IPm1[i] - 1];
    i++;
    
    @y58 = w[IPm1[i] - 1];
    i++;
    
    @y59 = w[IPm1[i] - 1];
    i++;
    
    @y60 = w[IPm1[i] - 1];
    i++;
    
    @y61 = w[IPm1[i] - 1];
    i++;
    
    @y62 = w[IPm1[i] - 1];
    i++;
    
    @y63 = w[IPm1[i] - 1];
    i++;
    
    @y64 = w[IPm1[i] - 1];
    i++;
  }}}

  output:
    BitstoInts: y[1-64];
}

actor BitstoInts {
  input:
    doIPm1: x[1-4];
  
  firing:
  {{{
    int w[4] = {@x1, @x2, @x3, @x4};
    int z = 0;
    int i;

    for (i = 0; i < 4; i++) {
      z = z | (w[i] << i);
    }
    @y1 = z;
  }}}

  output:
    F_HexPrinter: y1;
}

actor F_HexPrinter {
  input:
    BitstoInts: x[1-16];
  
  firing:
  {{{
    /*
    int w[64]={
      @x1, @x2, @x3, @x4, @x5, @x6, @x7, @x8, @x9, @x10,
      @x11, @x12, @x13, @x14, @x15, @x16
    };*/

    //! Get sum to get rid of compiler optimization.
    sum += @x1;
    sum += @x2;
    sum += @x3;
    sum += @x4;
    sum += @x5;
    sum += @x6;
    sum += @x7;
    sum += @x8;
    sum += @x9;
    sum += @x10;
    sum += @x11;
    sum += @x12;
    sum += @x13;
    sum += @x14;
    sum += @x15;
    sum += @x16;

    /*
    int i;
    for (i = 16 - 1; i >= 0; i--) {
      int v = w[i];
      if (v < 10){
        printf("%d", v);
      }else if (v == 10){
        printf("A");
      }else if (v == 11){
        printf("B");
      }else if (v == 12){
        printf("C");
      }else if (v == 13){
        printf("D");
      }else if (v == 14){
        printf("E");
      }else if (v == 15){
        printf("F");
      }else {
        printf("ERROR: %d\n", v);
      }
    }
    printf("\n");*/
  }}}
}

}
//! END sdf

postamble
{{{

int main()
{
  DES();
  printf("%lld\n", sum);
  return 0;
}

}}}
